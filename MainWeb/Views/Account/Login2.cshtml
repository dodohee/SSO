@{
    ViewData["Title"] = "Login Widget";
}

<script src="https://ok1static.oktacdn.com/assets/js/sdk/okta-signin-widget/2.6.0/js/okta-sign-in.min.js" type="text/javascript"></script>
<link href="https://ok1static.oktacdn.com/assets/js/sdk/okta-signin-widget/2.6.0/css/okta-sign-in.min.css" type="text/css" rel="stylesheet">
<link href="https://ok1static.oktacdn.com/assets/js/sdk/okta-signin-widget/2.6.0/css/okta-theme.css" type="text/css" rel="stylesheet">

<style>
    body {
        background-image: url('https://farm9.staticflickr.com/8332/8451032652_b2bf0bdadc_h.jpg');
        background-repeat: no-repeat;
        background-position: center center fixed;
        -webkit-background-size: cover;
        -moz-background-size: cover;
        -o-background-size: cover;
        background-size: cover;
    }

    #okta-login-container .button {
        color: #ffffff;
        background-color: #3a3f44;
        border-color: #3a3f44;
        background-image: linear-gradient(#484e55, #3a3f44 60%, #313539);
        background-repeat: no-repeat;
        filter: none;
    }

    #okta-sign-in.auth-container .button-primary {
        color: #fff;
        background-color: #00693c;
        background: -o-linear-gradient(top, #00693c 0%, #0073b2 100%);
        background: -ms-linear-gradient(top, #00693c 0%, #0073b2 100%);
        background: -webkit-linear-gradient( #00693c, #0073b2);
        background: linear-gradient(#00693c, #7bb900);
        /*background: linear-gradient(#007dc1, #0073b2);*/
        border-color: #004b75;
        border-bottom-color: #00456a;
        box-shadow: rgba(0, 0, 0, 0.15) 0 1px 0, rgba(255, 255, 255, 0.1) 0 1px 0 0 inset;
    }

    #okta-sign-in.auth-container .button-primary:hover {
        color: #fff;
        background-color: #00693c;
        background: -o-linear-gradient(top, #00693c 0%, #0073b2 100%);
        background: -ms-linear-gradient(top, #00693c 0%, #0073b2 100%);
        background: -webkit-linear-gradient( #00693c, #0073b2);
        background: linear-gradient(#7bb900, #00693c);
        /*background: linear-gradient(#007dc1, #0073b2);*/
        border-color: #004b75;
        border-bottom-color: #00456a;
        box-shadow: rgba(0, 0, 0, 0.15) 0 1px 0, rgba(255, 255, 255, 0.1) 0 1px 0 0 inset;
    } 
</style>

<div id="okta-login-container" class="auth-container main-container no-beacon"></div>

<script>
    var orgUrl = 'https://dev-619409-admin.oktapreview.com';
    var redirectUrl = 'http://localhost:23481/Account/OktaLogin?userId=';
    var oktaSignIn = new OktaSignIn({ baseUrl: orgUrl });
    oktaSignIn.renderEl(
        { el: '#okta-login-container' },
        function success(res) {
            if (res.status === 'SUCCESS') {
                console.log('success');
                redirectUrl = 'http://localhost:23481/Account/OktaLogin?userId=' + document.getElementById('okta-signin-username').value;
                res.session.setCookieAndRedirect(redirectUrl);
            } else {
                console.log(res.status);
                redirectUrl = 'http://localhost:23481/Account/OktaLoginFail?userId=' + document.getElementById('okta-signin-username').value;
                res.session.Redirect(redirectUrl);
            }
        },
        function error(err) {
            console.log('error');
            console.log(err);
            redirectUrl = 'http://localhost:23481/Account/OktaLoginError?userId=' + document.getElementById('okta-signin-username').value;
            res.session.Redirect(redirectUrl);
        }
    );

    window.addEventListener('load', function () {
        console.log('ready');

        (function ($) {
            function isDOMAttrModifiedSupported() {
                var p = document.createElement('p');
                var flag = false;

                if (p.addEventListener) {
                    p.addEventListener('DOMAttrModified', function () {
                        flag = true
                    }, false);
                } else if (p.attachEvent) {
                    p.attachEvent('onDOMAttrModified', function () {
                        flag = true
                    });
                } else { return false; }
                p.setAttribute('id', 'target');
                return flag;
            }

            function checkAttributes(chkAttr, e) {
                if (chkAttr) {
                    var attributes = this.data('attr-old-value');

                    if (e.attributeName.indexOf('style') >= 0) {
                        if (!attributes['style'])
                            attributes['style'] = {}; //initialize
                        var keys = e.attributeName.split('.');
                        e.attributeName = keys[0];
                        e.oldValue = attributes['style'][keys[1]]; //old value
                        e.newValue = keys[1] + ':'
                            + this.prop("style")[$.camelCase(keys[1])]; //new value
                        attributes['style'][keys[1]] = e.newValue;
                    } else {
                        e.oldValue = attributes[e.attributeName];
                        e.newValue = this.attr(e.attributeName);
                        attributes[e.attributeName] = e.newValue;
                    }

                    this.data('attr-old-value', attributes); //update the old value object
                }
            }

            //initialize Mutation Observer
            var MutationObserver = window.MutationObserver
                || window.WebKitMutationObserver;

            $.fn.attrchange = function (a, b) {
                if (typeof a == 'object') {//core
                    var cfg = {
                        trackValues: false,
                        callback: $.noop
                    };
                    //backward compatibility
                    if (typeof a === "function") { cfg.callback = a; } else { $.extend(cfg, a); }

                    if (cfg.trackValues) { //get attributes old value
                        this.each(function (i, el) {
                            var attributes = {};
                            for (var attr, i = 0, attrs = el.attributes, l = attrs.length; i < l; i++) {
                                attr = attrs.item(i);
                                attributes[attr.nodeName] = attr.value;
                            }
                            $(this).data('attr-old-value', attributes);
                        });
                    }

                    if (MutationObserver) { //Modern Browsers supporting MutationObserver
                        var mOptions = {
                            subtree: false,
                            attributes: true,
                            attributeOldValue: cfg.trackValues
                        };
                        var observer = new MutationObserver(function (mutations) {
                            mutations.forEach(function (e) {
                                var _this = e.target;
                                //get new value if trackValues is true
                                if (cfg.trackValues) {
                                    e.newValue = $(_this).attr(e.attributeName);
                                }
                                if ($(_this).data('attrchange-status') === 'connected') { //execute if connected
                                    cfg.callback.call(_this, e);
                                }
                            });
                        });

                        return this.data('attrchange-method', 'Mutation Observer').data('attrchange-status', 'connected')
                            .data('attrchange-obs', observer).each(function () {
                                observer.observe(this, mOptions);
                            });
                    } else if (isDOMAttrModifiedSupported()) { //Opera
                        //Good old Mutation Events
                        return this.data('attrchange-method', 'DOMAttrModified').data('attrchange-status', 'connected').on('DOMAttrModified', function (event) {
                            if (event.originalEvent) { event = event.originalEvent; }//jQuery normalization is not required 
                            event.attributeName = event.attrName; //property names to be consistent with MutationObserver
                            event.oldValue = event.prevValue; //property names to be consistent with MutationObserver
                            if ($(this).data('attrchange-status') === 'connected') { //disconnected logically
                                cfg.callback.call(this, event);
                            }
                        });
                    } else if ('onpropertychange' in document.body) { //works only in IE		
                        return this.data('attrchange-method', 'propertychange').data('attrchange-status', 'connected').on('propertychange', function (e) {
                            e.attributeName = window.event.propertyName;
                            //to set the attr old value
                            checkAttributes.call($(this), cfg.trackValues, e);
                            if ($(this).data('attrchange-status') === 'connected') { //disconnected logically
                                cfg.callback.call(this, e);
                            }
                        });
                    }
                    return this;
                } else if (typeof a == 'string' && $.fn.attrchange.hasOwnProperty('extensions') &&
                    $.fn.attrchange['extensions'].hasOwnProperty(a)) { //extensions/options
                    return $.fn.attrchange['extensions'][a].call(this, b);
                }
            }
        })(jQuery);

        $(".o-form-error-container").attrchange({
            trackValues: true, // set to true so that the event object is updated with old & new values
            callback: function (evnt) {
                if (evnt.attributeName == "class") { // which attribute you want to watch for changes
                    if (evnt.newValue.indexOf('o-form-has-errors')) {
                        console.log('o-form-has-errors');

                        redirectUrl = 'http://localhost:23481/Account/OktaLoginFail?userId=' + document.getElementById('okta-signin-username').value;
                        window.location.replace(redirectUrl);
                    }

                }
            }
        });

     });

</script>
